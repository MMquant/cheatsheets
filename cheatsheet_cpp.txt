PRIVATE, PUBLIC, PROTECTED

    DO create a public inheritance hierarchy to establish an is-a relationship.
    DO create a private or protected inheritance hierarchy to establish a has-a relationship.
    DO remember that public inheritance means that classes deriving from the derived class have access to the public and protected members of the base class.
    DO remember that private inheritance means that even classes deriving from the derived class have no access to the base class.
    DO remember that protected inheritance means that classes deriving from the derived class have access to the protected and public methods of the base class.
    DO remember that irrespective of the nature of inheritance relationship, private members in the base class cannot be accessed by any derived class.

VIRTUAL KEYWORD

    1. A function declared virtual means that an existing overriding function in a derived class is invoked.
    2. An inheritance relationship declared using keyword virtual between classes Derived1 and Derived2 that inherits
    from class Base means that another class Derived3 that inherits from Derived1 and Derived2 still results in the
    creation of only one instance of Base during instantiation of type Derived3.

CASTING

    destination_type variable = cast_type<destination_type> (input variable)

    static_cast
    Used to cast pointers or variables of related types/classes. Pointers can be upcasted to base type or downcasted to derived type.
    Upcasts don't have to be explicit. Downcasts must be explicit.

    dynamic_cast
    Used to cast during runtime. Used to detect pointer types.(runtime type identification or RTTI)
    example:
    void DetectFishType(Fish *InputFish)
    {
        Tuna *pIsTuna = dynamic_cast<Tuna*>(InputFish);
        if (pIsTuna)
            {
                cout << "Detected Tuna. Making Tuna dinner: " << endl;
                pIsTuna->BecomeDinner(); // calling Tuna::BecomeDinner
            }

        Carp *pIsCarp = dynamic_cast<Carp*>(InputFish);
        if(pIsCarp)
        {
            cout << "Detected Carp. Making carp talk: " << endl;
            pIsCarp->Talk(); // calling Carp::Talk
        }

        cout << "Verifying type using virtual Fish::Swim: " << endl;
        InputFish->Swim(); // calling virtual function Swim
    }

    reinterpret_cast
    Similar to C-style cast. Used to cast unrelated types. What can't be cast by static_cast may be cast with
    reinterpret_cast. It's bad programming practice to use it.

    const_cast
    const_cast enables you to turn off the const access modifier to an object.
    example
    class SomeClass
    {
    public:
        // ...
        void DisplayMembers (); // a display function ought to be const
    };
    void DisplayAllData (const SomeClass& mData)
    {
        SomeClass& refData = const_cast <SomeClass&>(mData);
        refData.DisplayMembers(); // Allowed!
    }

CONTAINERS

    SEQUENTIAL

        std::vector
        A:Quick (constant time) insertion at the end. Array-like access.
        D:Resizing can result in performance loss.
        Search time is proportional to the number of elements in the container.

        std::deque
        A:All advantages of the vector. Additionally, offers constant-time insertion at the beginning of the container too.
        D:Disadvantages of the vector with respect to performance and search are applicable to the deque.
        Unlike the vector, the deque by specification does not need to feature the reserve() function that allows the programmer to reserve memory space to be usedâ€”a feature that avoids frequent resizing to improve performance.

        std::list
        A:Constant time insertion at the front, middle, or end of the list.
        Insertion or removal of elements does not invalidate iterators that point to other elements in the list.
        D:Elements cannot be accessed randomly given an index as in an array.
        Accessing elements can be slower than the vector because elements are not stored in adjacent memory locations.
        Search time is proportional to the number of elements in the container.

        std:: forward_list
        A:Singly-linked list class that allows iteration only in one direction.
        D:Allows insertion only at the front of the list via push_front()

    ASSOCIATIVE
    
        std::set
        A:Search is not directly proportional to the number of elements in the container,
        rather to the logarithm thereof and hence is often significantly faster than sequential containers.
        D:Insertion of elements is slower than in sequential counterparts, as elements are sorted at insertion.

        std::unordered_ set
        A:Search, insertion and removal in this type of container is nearly independent of the number of elements in the container.
        D:As elements are weakly ordered, one cannot rely on their relative position within the container.

        std:: multiset
        A:Should be used when a set needs to contain non-unique values too.
        D:Insertions may be slower than in a sequential container as elements (pairs) are sorted on insertion.

        std::unordered_ multiset
        A:Should be preferred over an unordered_set when you need to contain non-unique values too.
        Performance is similar to unordered_set, namely constant average time for search, insertion and removal of elements, independent of size of container.
        D:Elements are weakly ordered, so one cannot rely on their relative position within the container

        std::map
        A:Key-value pairs container that offers search performance proportional to the logarithm of number of elements in the container and hence often significantly faster than sequential containers.
        D:Elements (pairs) are sorted on insertion, hence insertion will be slower than in a sequential container of pairs.

        std::unordered_map(hash map)
        A:Offers advantage of near constant time search, insertion and removal of elements independent of the size of the container.
        D:Elements are weakly ordered and hence not suited to cases where order is important.

        std::multimap
        A:To be selected over std::map when requirements necessitate the need of a key-value pairs container that holds elements with non-unique keys.
        D:Insertion or elements will be slower than in a sequential equivalent as elements are sorted on insertion.

        std::unordered_multimap
        A:To be selected over multimap when you need a key-value pairs container where keys can be non-unique.
        Allows constant average time insertion, search and removal of elements, independent of the size of the container
        D:Is a weakly ordered container, so you cannot use it when you need to rely on the relative order of elements.
